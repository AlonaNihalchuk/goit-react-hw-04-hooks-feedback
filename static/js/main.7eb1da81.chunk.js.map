{"version":3,"sources":["components/Feedback/FeedbackOptions .js","components/Statistics/Statistics.js","components/Notification/Notification.js","components/App/App.js","index.js","components/Feedback/FeedbackOptions.module.css"],"names":["FeedbackOptions","onIncrement","options","className","styles","feedbackButtons","map","option","button","type","name","onClick","Statistics","good","neutral","bad","total","positivePercentage","Notification","message","App","useState","setGood","setNeutral","setBad","countTotalFeedback","e","target","prevState","Math","round","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"kSA2BeA,MAxBf,YAAoD,IAAzBC,EAAwB,EAAxBA,YAAaC,EAAW,EAAXA,QACtC,OACE,oBAAIC,UAAWC,IAAOC,gBAAtB,SACGH,EAAQI,KAAI,SAACC,GAAD,OACX,oBAAiBJ,UAAWC,IAAOI,OAAnC,SACE,wBACEC,KAAK,SACLC,KAAMH,EACNJ,UAAU,MACVQ,QAASV,EAJX,SAMGM,KAPIA,SC4BFK,MAjCf,YAAwE,IAAlDC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,IAAKC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,mBAC/C,OACE,sBAAKd,UAAU,qBAAf,UACE,4CACA,+BACE,6BACE,uCAAUU,OAEZ,6BACE,0CAAaC,OAEf,6BACE,sCAASC,OAEX,6BACE,wCAAWC,OAEb,6BACE,oDAAuBC,EAAvB,iBCVKC,MARf,YAAoC,IAAZC,EAAW,EAAXA,QACtB,OAAO,4BAAIA,KCwDEC,MArDf,WACE,MAAwBC,mBAAS,GAAjC,mBAAOR,EAAP,KAAaS,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOP,EAAP,KAAgBS,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAON,EAAP,KAAYS,EAAZ,KAkBMC,EAAqB,WACzB,OAAOZ,EAAOC,EAAUC,GAS1B,OACE,0BAASZ,UAAU,kBAAnB,UACE,uDACA,cAAC,EAAD,CACED,QANU,CAAC,OAAQ,UAAW,OAO9BC,UAAU,kBACVF,YAhCkB,SAACyB,GACvB,OAAQA,EAAEC,OAAOjB,MACf,IAAK,OACHY,GAAQ,SAACM,GAAD,OAAeA,EAAY,KACnC,MACF,IAAK,UACHL,GAAW,SAACK,GAAD,OAAeA,EAAY,KACtC,MACF,IAAK,MACHJ,GAAO,SAACI,GAAD,OAAeA,EAAY,KAClC,MACF,QACE,WAsBDH,IACC,cAAC,EAAD,CACEZ,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOS,IACPR,mBAnBCY,KAAKC,MAAOjB,EAAOY,IAAwB,OAsB9C,cAAC,EAAD,CAAcN,QAAQ,0BChD9BY,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U,kBCT1BC,EAAOC,QAAU,CAAC,gBAAkB,yCAAyC,OAAS,mC","file":"static/js/main.7eb1da81.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\nimport styles from \"./FeedbackOptions.module.css\";\n\nfunction FeedbackOptions({ onIncrement, options }) {\n  return (\n    <ul className={styles.feedbackButtons}>\n      {options.map((option) => (\n        <li key={option} className={styles.button}>\n          <button\n            type=\"button\"\n            name={option}\n            className=\"btn\"\n            onClick={onIncrement}\n          >\n            {option}\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nFeedbackOptions.propTypes = {\n  onIncrement: PropTypes.func.isRequired,\n  options: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\n};\n\nexport default FeedbackOptions;\n","import PropTypes from \"prop-types\";\n\nfunction Statistics({ good, neutral, bad, total, positivePercentage }) {\n  return (\n    <div className=\"statistics-section\">\n      <h2>Statistics</h2>\n      <ul>\n        <li>\n          <p>Good: {good}</p>\n        </li>\n        <li>\n          <p>Neutral: {neutral}</p>\n        </li>\n        <li>\n          <p>Bad: {bad}</p>\n        </li>\n        <li>\n          <p>Total: {total}</p>\n        </li>\n        <li>\n          <p>Positive feedback: {positivePercentage} %</p>\n        </li>\n      </ul>\n    </div>\n  );\n}\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\n\nexport default Statistics;\n","import PropTypes from \"prop-types\";\n\nfunction Notification({ message }) {\n  return <p>{message}</p>;\n}\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default Notification;\n","import \"./App.css\";\nimport { useState } from \"react\";\nimport FeedbackOptions from \"../Feedback/FeedbackOptions \";\nimport Statistics from \"../Statistics/Statistics\";\nimport Notification from \"../Notification/Notification\";\n\nfunction App() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const handleIncrement = (e) => {\n    switch (e.target.name) {\n      case \"good\":\n        setGood((prevState) => prevState + 1);\n        break;\n      case \"neutral\":\n        setNeutral((prevState) => prevState + 1);\n        break;\n      case \"bad\":\n        setBad((prevState) => prevState + 1);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const countTotalFeedback = () => {\n    return good + neutral + bad;\n  };\n\n  const countPositiveFeedbackPercentage = () => {\n    return Math.round((good / countTotalFeedback()) * 100);\n  };\n\n  const options = [\"good\", \"neutral\", \"bad\"];\n\n  return (\n    <section className=\"feedbackSection\">\n      <h1>Please leave feedback</h1>\n      <FeedbackOptions\n        options={options}\n        className=\"feedbackOptions\"\n        onIncrement={handleIncrement}\n      />\n      {countTotalFeedback() ? (\n        <Statistics\n          good={good}\n          neutral={neutral}\n          bad={bad}\n          total={countTotalFeedback()}\n          positivePercentage={countPositiveFeedbackPercentage()}\n        />\n      ) : (\n        <Notification message=\"No feedback given\"></Notification>\n      )}\n    </section>\n  );\n}\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"modern-normalize/modern-normalize.css\";\nimport \"./index.css\";\nimport App from \"./components/App/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"feedbackButtons\":\"FeedbackOptions_feedbackButtons__1_yyH\",\"button\":\"FeedbackOptions_button__rkVnE\"};"],"sourceRoot":""}